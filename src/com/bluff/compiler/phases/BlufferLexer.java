// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lex_grammar.jflex


package com.bluff.compiler.phases;
import com.bluff.compiler.phases.Helper.Token;
import com.bluff.compiler.phases.Helper.TT;
import java.util.ArrayList;
import com.bluff.util.RegexTool;
import com.bluff.compiler.ErrorHandler;
import static com.bluff.compiler.phases.RegexTokenizer.SUPPORTED_KEYWORDS;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public final class BlufferLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00"+
    "\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400\12\u1f00"+
    "\4\u0100\1\u5500\17\u1f00\2\u3b00\1\u5600\41\u1f00\2\u0100\1\u5700"+
    "\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u3b00\1\u5b00\2\u3b00\1\u5c00"+
    "\45\u1f00\1\u5d00\1\u5e00\1\u5f00\11\u1f00\1\u6000\24\u1f00\1\u6100"+
    "\1\u6200\1\u1f00\1\u6300\1\u6400\1\u6500\1\u6600\2\u1f00\1\u6700"+
    "\5\u1f00\1\u6800\1\u6900\1\u6a00\5\u1f00\1\u6b00\1\u6c00\4\u1f00"+
    "\1\u6d00\2\u1f00\1\u6e00\16\u1f00\246\u0100\1\u6f00\20\u0100\1\u7000"+
    "\1\u7100\25\u3b00\1\u7200\34\u3b00\1\u7300\14\u1f00\2\u0100\1\u7400"+
    "\u0b05\u1f00\1\u7500\1\u7600\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\3\16\0\4\4\1\1"+
    "\1\4\1\5\1\4\1\6\2\4\1\7\2\4\1\10"+
    "\1\11\1\4\1\12\1\13\1\14\1\15\7\16\2\17"+
    "\7\4\3\20\1\21\1\22\1\21\5\6\1\23\13\6"+
    "\1\24\2\6\1\4\1\25\2\4\1\6\1\4\3\20"+
    "\1\21\1\22\1\21\5\6\1\23\13\6\1\24\2\6"+
    "\4\4\6\0\1\26\32\0\1\1\1\4\4\6\4\4"+
    "\1\6\2\4\1\0\7\4\1\6\4\4\1\6\5\4"+
    "\27\6\1\4\37\6\1\4\u01ca\6\4\4\14\6\16\4"+
    "\5\6\7\4\1\6\1\4\1\6\21\4\160\26\5\6"+
    "\1\4\2\6\2\4\4\6\1\4\1\1\6\4\1\6"+
    "\1\4\3\6\1\4\1\6\1\4\24\6\1\4\123\6"+
    "\1\4\213\6\1\4\5\26\2\1\236\6\10\1\1\4"+
    "\46\6\2\4\1\6\6\4\1\1\47\6\1\1\6\4"+
    "\1\6\1\4\55\26\1\4\1\26\1\4\2\26\1\4"+
    "\2\26\1\4\1\26\10\4\33\6\4\4\1\1\3\6"+
    "\15\4\5\0\6\4\1\6\4\4\13\26\5\4\53\6"+
    "\37\26\4\4\2\6\1\26\143\6\1\4\1\6\7\26"+
    "\1\0\1\4\6\26\2\6\2\26\1\4\4\26\2\6"+
    "\12\26\3\6\2\4\1\6\17\4\1\0\1\6\1\26"+
    "\36\6\33\26\2\4\131\6\13\26\1\6\16\4\12\26"+
    "\41\6\11\26\2\6\4\4\1\6\2\4\1\1\2\4"+
    "\26\6\4\26\1\6\11\26\1\6\3\26\1\6\5\26"+
    "\22\4\31\6\3\26\4\4\13\1\65\4\1\6\1\1"+
    "\13\6\10\1\1\4\10\1\25\4\17\1\1\4\1\1"+
    "\33\26\1\1\4\26\66\6\3\26\1\6\22\26\1\6"+
    "\7\26\12\6\2\26\2\4\12\26\1\4\7\6\1\1"+
    "\7\6\1\1\3\26\1\4\10\6\2\4\2\6\2\4"+
    "\26\6\1\4\7\6\1\4\1\6\3\4\4\6\2\4"+
    "\1\26\1\6\7\26\2\4\2\26\2\4\3\26\1\6"+
    "\10\4\1\26\4\4\2\6\1\4\3\6\2\26\2\4"+
    "\12\26\4\6\7\4\1\6\1\1\1\4\1\1\2\4"+
    "\3\26\1\4\6\6\4\4\2\6\2\4\26\6\1\4"+
    "\7\6\1\4\2\6\1\4\2\6\1\4\2\6\2\4"+
    "\1\26\1\4\5\26\4\4\2\26\2\4\3\26\3\4"+
    "\1\26\7\4\4\6\1\4\1\6\7\4\14\26\3\6"+
    "\1\26\13\4\3\26\1\4\11\6\1\4\3\6\1\4"+
    "\26\6\1\4\7\6\1\4\2\6\1\4\5\6\2\4"+
    "\1\26\1\6\10\26\1\4\3\26\1\4\3\26\2\4"+
    "\1\6\17\4\2\6\2\26\2\4\12\26\1\4\1\6"+
    "\7\4\7\1\1\4\3\26\1\4\10\6\2\4\2\6"+
    "\2\4\26\6\1\4\7\6\1\4\2\6\1\4\5\6"+
    "\2\4\1\26\1\6\7\26\2\4\2\26\2\4\3\26"+
    "\10\4\2\26\4\4\2\6\1\4\3\6\2\26\2\4"+
    "\12\26\1\4\1\6\20\4\1\26\1\6\1\4\6\6"+
    "\3\4\3\6\1\4\4\6\3\4\2\6\1\4\1\6"+
    "\1\4\2\6\3\4\2\6\3\4\3\6\3\4\14\6"+
    "\4\4\5\26\3\4\3\26\1\4\4\26\2\4\1\6"+
    "\6\4\1\26\16\4\12\26\11\4\1\6\6\4\1\1"+
    "\3\26\1\1\10\6\1\4\3\6\1\4\27\6\1\4"+
    "\12\6\1\1\5\6\3\4\1\6\7\26\1\4\3\26"+
    "\1\4\4\26\7\4\2\26\1\4\2\6\1\1\5\4"+
    "\2\6\2\26\2\4\12\26\20\4\2\1\2\26\1\4"+
    "\10\6\1\4\3\6\1\4\27\6\1\4\12\6\1\4"+
    "\5\6\2\4\1\26\1\6\7\26\1\4\3\26\1\4"+
    "\4\26\7\4\2\26\7\4\1\6\1\4\2\6\2\26"+
    "\2\4\12\26\1\4\2\6\15\4\2\1\2\26\1\4"+
    "\10\6\1\4\3\6\1\4\51\6\2\1\1\6\7\26"+
    "\1\4\3\26\1\4\4\26\1\6\5\4\3\1\1\26"+
    "\7\4\1\1\2\6\2\26\2\4\12\26\12\4\6\6"+
    "\2\4\2\26\1\4\22\6\3\4\30\6\1\4\11\6"+
    "\1\4\1\6\2\4\7\6\3\4\1\26\4\4\6\26"+
    "\1\4\1\26\1\4\10\26\6\4\12\1\2\4\2\26"+
    "\15\4\60\6\1\26\2\6\7\26\4\4\10\6\10\26"+
    "\1\4\12\26\47\4\2\6\1\4\1\6\1\4\1\1"+
    "\2\6\1\1\1\6\1\4\1\1\1\6\6\1\4\6"+
    "\1\1\7\6\1\1\3\6\1\4\1\6\1\4\1\6"+
    "\2\1\2\6\1\1\4\6\1\26\2\6\6\26\1\1"+
    "\2\26\1\6\2\4\5\6\1\4\1\6\1\4\6\26"+
    "\2\4\12\26\2\4\4\6\40\4\1\6\27\4\2\26"+
    "\6\4\12\26\13\4\1\26\1\4\1\26\1\4\1\26"+
    "\4\4\2\26\10\6\1\4\44\6\4\4\24\26\1\4"+
    "\2\26\5\6\13\26\1\4\44\26\11\4\1\26\71\4"+
    "\53\6\24\26\1\6\12\26\6\4\6\6\4\26\4\6"+
    "\3\26\1\6\3\26\2\6\7\26\3\6\4\26\15\6"+
    "\14\26\1\6\17\26\2\4\46\6\1\4\1\6\5\4"+
    "\1\6\2\4\53\6\1\4\115\6\1\4\4\6\2\4"+
    "\7\6\1\4\1\6\1\4\4\6\2\4\51\6\1\4"+
    "\4\6\2\4\41\6\1\4\4\6\2\4\7\6\1\4"+
    "\1\6\1\4\4\6\2\4\17\6\1\4\71\6\1\4"+
    "\4\6\2\4\103\6\2\4\3\26\40\4\20\6\20\4"+
    "\125\6\1\1\2\4\6\1\3\4\u016c\6\2\4\21\6"+
    "\1\1\32\6\5\4\113\6\3\4\3\6\10\1\7\4"+
    "\15\6\1\4\4\6\3\26\13\4\22\6\3\26\13\4"+
    "\22\6\2\26\14\4\15\6\1\4\3\6\1\4\2\26"+
    "\14\4\64\6\40\26\3\4\1\6\3\4\2\6\1\26"+
    "\2\4\12\26\41\4\3\26\2\4\12\26\6\4\130\6"+
    "\1\1\7\4\51\6\1\26\1\6\5\4\106\6\12\4"+
    "\35\6\2\1\1\4\14\26\4\4\14\26\12\4\12\26"+
    "\36\6\2\4\5\6\13\4\54\6\4\4\21\26\7\6"+
    "\2\26\6\4\12\26\46\4\27\6\5\26\4\4\65\6"+
    "\12\26\1\4\35\26\2\4\13\26\6\4\12\26\15\4"+
    "\1\6\10\4\17\1\101\4\5\26\57\6\21\26\7\6"+
    "\4\4\12\26\21\4\11\26\14\4\3\26\36\6\15\26"+
    "\2\6\12\26\54\6\16\26\14\4\44\6\24\26\10\4"+
    "\12\26\3\4\3\6\12\26\44\6\2\4\11\1\7\4"+
    "\53\1\2\4\3\1\20\4\3\26\1\4\25\26\4\6"+
    "\1\26\4\6\3\26\2\6\4\1\5\4\300\6\47\26"+
    "\23\1\1\4\1\1\4\26\26\6\2\4\6\6\2\4"+
    "\46\6\2\4\6\6\2\4\10\6\1\4\1\6\1\4"+
    "\1\6\1\4\1\6\1\4\37\6\2\4\65\6\1\4"+
    "\7\6\1\4\1\6\3\4\3\6\1\4\7\6\3\4"+
    "\4\6\2\4\6\6\4\4\15\6\5\4\3\6\1\4"+
    "\7\6\3\4\13\1\5\0\30\4\2\1\5\0\1\1"+
    "\17\4\2\6\23\4\1\6\12\4\1\1\5\0\5\4"+
    "\6\0\1\4\1\6\15\4\1\6\20\4\15\6\3\4"+
    "\33\6\25\4\15\26\4\1\1\26\3\1\14\26\21\4"+
    "\1\6\4\4\1\6\2\4\12\6\1\4\1\6\3\4"+
    "\5\6\6\4\1\6\1\4\1\6\1\4\1\6\1\4"+
    "\4\6\1\4\13\6\2\4\4\6\5\4\5\6\4\4"+
    "\1\6\21\4\51\6\u022d\4\64\1\26\4\57\6\1\4"+
    "\57\6\1\4\205\6\6\4\4\6\3\26\2\6\14\4"+
    "\46\6\1\4\1\6\5\4\1\6\2\4\70\6\7\4"+
    "\1\6\17\4\1\26\27\6\11\4\7\6\1\4\7\6"+
    "\1\4\7\6\1\4\7\6\1\4\7\6\1\4\7\6"+
    "\1\4\7\6\1\4\7\6\1\4\40\26\57\4\1\6"+
    "\320\4\1\1\4\4\3\6\31\4\11\6\6\26\1\4"+
    "\5\6\2\4\5\6\4\4\126\6\2\4\2\26\2\4"+
    "\3\6\1\4\132\6\1\4\4\6\5\4\51\6\2\1"+
    "\1\4\136\6\21\4\33\6\65\4\306\6\112\4\315\6"+
    "\43\1\20\4\215\6\103\4\56\6\2\4\15\6\3\4"+
    "\20\6\12\26\2\6\24\4\57\6\1\26\3\1\1\4"+
    "\12\26\1\4\31\6\7\1\1\26\120\6\2\26\45\4"+
    "\11\6\2\4\147\6\2\4\4\6\1\1\4\6\14\1"+
    "\13\6\25\1\2\4\5\1\60\4\1\1\12\6\1\26"+
    "\3\6\1\26\4\6\1\26\27\6\5\26\20\4\1\6"+
    "\7\4\64\6\14\4\2\26\62\6\21\26\1\1\12\4"+
    "\12\26\6\4\22\26\6\6\3\4\1\6\1\4\3\1"+
    "\12\26\34\6\10\26\2\4\27\6\15\26\14\4\35\6"+
    "\3\4\4\26\57\6\16\26\16\4\1\6\12\26\6\4"+
    "\37\1\1\4\51\6\16\26\11\4\3\6\1\26\10\6"+
    "\2\26\2\4\12\26\6\4\27\6\3\4\1\6\1\26"+
    "\4\1\60\6\1\26\1\6\3\26\2\6\2\26\5\6"+
    "\2\26\1\6\1\26\1\6\30\4\3\6\2\4\13\6"+
    "\5\26\2\4\3\6\2\26\12\4\6\6\2\4\6\6"+
    "\2\4\6\6\11\4\7\6\1\4\7\6\1\4\53\1"+
    "\1\4\14\1\10\4\120\1\43\6\10\26\1\4\2\26"+
    "\2\4\12\26\6\4\244\6\14\4\27\6\4\4\61\6"+
    "\4\4\156\6\2\4\152\6\46\4\7\6\14\4\5\6"+
    "\5\4\1\6\1\26\12\6\1\4\15\6\1\4\5\6"+
    "\1\4\1\6\1\4\2\6\1\4\2\6\1\4\154\6"+
    "\41\4\153\6\22\4\100\6\2\4\66\6\50\4\15\6"+
    "\3\4\20\26\20\4\7\26\11\1\3\4\2\6\30\4"+
    "\3\6\31\4\1\6\6\4\5\6\1\4\207\6\2\4"+
    "\1\0\4\4\1\6\13\4\12\26\7\4\32\6\4\4"+
    "\1\6\1\4\32\6\13\4\131\6\3\4\6\6\2\4"+
    "\6\6\2\4\6\6\2\4\3\6\3\4\2\6\3\4"+
    "\2\6\22\4\3\0\4\4\14\6\1\4\32\6\1\4"+
    "\23\6\1\4\2\6\1\4\17\6\2\4\16\6\42\4"+
    "\173\6\105\4\65\6\210\4\1\26\202\4\35\6\3\4"+
    "\61\6\17\4\1\1\37\4\37\6\1\1\15\4\3\1"+
    "\33\6\5\4\53\1\5\4\36\6\2\4\44\6\4\4"+
    "\10\6\1\4\5\6\52\4\236\6\2\4\12\26\6\4"+
    "\44\1\4\4\44\1\4\4\50\1\10\4\64\1\234\4"+
    "\u0137\1\11\4\26\1\12\4\10\1\230\4\6\6\2\4"+
    "\1\6\1\4\54\6\1\4\2\6\3\4\1\6\2\4"+
    "\27\6\12\4\27\1\11\4\37\1\101\4\23\1\1\4"+
    "\2\1\12\4\26\6\12\4\32\6\106\4\70\6\6\4"+
    "\2\6\100\4\1\6\3\26\1\4\2\26\5\4\4\26"+
    "\4\6\1\4\3\6\1\4\33\6\2\1\2\4\3\26"+
    "\4\4\1\26\40\4\35\6\3\4\35\1\43\4\10\1"+
    "\1\4\36\1\31\4\66\6\12\4\26\6\12\4\23\6"+
    "\15\4\22\1\156\4\111\6\67\4\63\1\15\4\63\1"+
    "\15\4\50\1\10\4\12\1\306\4\35\1\12\4\1\1"+
    "\10\4\41\1\217\4\27\1\11\4\3\26\65\6\17\26"+
    "\37\4\12\26\17\4\1\1\3\26\55\6\13\26\2\4"+
    "\1\0\22\4\31\6\7\4\12\26\6\4\3\26\44\6"+
    "\16\26\1\4\12\26\4\4\3\1\11\4\44\1\2\4"+
    "\1\1\11\4\3\26\60\6\16\26\4\6\4\4\4\1"+
    "\3\4\12\26\1\1\1\4\1\1\43\4\22\1\1\4"+
    "\45\1\6\4\1\1\101\4\7\1\1\4\1\1\1\4"+
    "\4\1\1\4\17\1\1\4\12\1\7\4\73\1\5\4"+
    "\12\1\6\4\4\1\1\4\10\1\2\4\2\1\2\4"+
    "\26\1\1\4\7\1\1\4\2\1\1\4\5\1\1\4"+
    "\12\1\2\4\2\1\2\4\3\1\2\4\1\1\6\4"+
    "\1\1\5\4\7\1\2\4\7\1\3\4\5\1\213\4"+
    "\113\1\5\4\12\1\4\4\2\1\40\4\106\1\1\4"+
    "\1\1\10\4\12\1\246\4\66\1\2\4\11\1\27\4"+
    "\6\1\42\4\101\1\3\4\1\1\13\4\12\1\46\4"+
    "\53\6\15\26\1\1\7\4\12\26\66\4\33\1\2\4"+
    "\17\1\4\4\12\1\306\4\73\1\145\4\112\1\25\4"+
    "\1\1\240\4\10\1\2\4\56\1\2\4\10\1\1\4"+
    "\2\1\33\4\77\1\10\4\1\1\10\4\112\1\3\4"+
    "\1\1\42\4\71\1\7\4\11\1\1\4\55\1\1\4"+
    "\11\1\17\4\12\1\30\4\36\1\2\4\26\1\1\4"+
    "\16\1\111\4\7\1\1\4\2\1\1\4\54\1\3\4"+
    "\1\1\1\4\2\1\1\4\11\1\10\4\12\1\6\4"+
    "\6\1\1\4\2\1\1\4\45\1\1\4\2\1\1\4"+
    "\6\1\7\4\12\1\u0136\4\27\1\11\4\157\6\53\1"+
    "\146\4\143\6\14\1\21\4\304\1\274\4\57\6\321\4"+
    "\107\1\271\4\71\6\7\4\37\1\1\4\12\1\146\4"+
    "\36\1\2\4\5\1\13\4\67\1\11\4\4\1\14\4"+
    "\12\1\11\4\25\1\5\4\23\1\260\4\100\1\200\4"+
    "\105\6\6\1\4\4\1\1\1\6\56\26\11\1\7\4"+
    "\4\26\15\6\100\4\2\1\1\4\1\1\34\4\370\1"+
    "\10\4\363\1\15\4\2\6\u011d\1\61\4\3\1\21\4"+
    "\4\1\10\4\u018c\1\4\4\153\1\5\4\15\1\3\4"+
    "\11\1\7\4\12\1\3\4\2\1\306\4\5\26\3\4"+
    "\6\26\10\0\10\26\2\4\7\26\36\4\4\26\224\4"+
    "\3\26\273\4\125\6\1\4\107\6\1\4\2\6\2\4"+
    "\1\6\2\4\2\6\2\4\4\6\1\4\14\6\1\4"+
    "\1\6\1\4\7\6\1\4\101\6\1\4\4\6\2\4"+
    "\10\6\1\4\7\6\1\4\34\6\1\4\4\6\1\4"+
    "\5\6\1\4\1\6\3\4\7\6\1\4\u0154\6\2\4"+
    "\31\6\1\4\31\6\1\4\37\6\1\4\31\6\1\4"+
    "\37\6\1\4\31\6\1\4\37\6\1\4\31\6\1\4"+
    "\37\6\1\4\31\6\1\4\10\6\2\4\62\26\67\1"+
    "\4\4\62\1\10\4\1\1\16\4\1\1\26\4\5\1"+
    "\1\4\17\1\120\4\7\1\1\4\21\1\2\4\7\1"+
    "\1\4\2\1\1\4\5\1\325\4\55\1\3\4\16\1"+
    "\2\4\12\1\4\4\1\1\u0171\4\72\1\6\4\305\1"+
    "\13\4\7\1\51\4\114\1\4\4\12\1\246\4\4\6"+
    "\1\4\33\6\1\4\2\6\1\4\1\6\2\4\1\6"+
    "\1\4\12\6\1\4\4\6\1\4\1\6\1\4\1\6"+
    "\6\4\1\6\4\4\1\6\1\4\1\6\1\4\1\6"+
    "\1\4\3\6\1\4\2\6\1\4\1\6\2\4\1\6"+
    "\1\4\1\6\1\4\1\6\1\4\1\6\1\4\1\6"+
    "\1\4\2\6\1\4\1\6\2\4\4\6\1\4\7\6"+
    "\1\4\4\6\1\4\4\6\1\4\1\6\1\4\12\6"+
    "\1\4\21\6\5\4\3\6\1\4\5\6\1\4\21\6"+
    "\164\4\32\1\6\4\32\1\6\4\32\1\166\4\327\6"+
    "\51\4\65\6\13\4\336\6\2\4\u0182\1\16\4\u0131\1"+
    "\37\4\36\6\343\4\1\0\36\4\140\0\200\4\360\26"+
    "\20\4";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[30464];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\3\1\2\4\1\0"+
    "\1\5\3\0\1\6\1\0\1\2\1\7\2\6\1\0"+
    "\1\7\1\10\1\4\2\0\1\2\1\0\1\6\1\10"+
    "\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[32];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\27\0\27\0\56\0\105\0\134\0\163\0\212"+
    "\0\241\0\270\0\56\0\27\0\317\0\134\0\346\0\375"+
    "\0\u0114\0\u012b\0\u0142\0\u0159\0\27\0\u0170\0\27\0\u0187"+
    "\0\27\0\u019e\0\u01b5\0\u01cc\0\u01e3\0\u01fa\0\27\0\u0211";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[32];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\2\1\4\1\5\1\6\1\2\1\3"+
    "\1\2\1\7\1\10\1\11\2\12\5\5\1\2\1\3"+
    "\27\0\2\13\1\14\2\13\1\14\17\13\1\15\1\13"+
    "\1\5\5\0\1\5\6\0\10\5\1\0\1\5\2\16"+
    "\1\14\4\16\1\14\15\16\1\17\1\16\15\0\3\20"+
    "\17\0\1\21\3\0\1\22\25\0\1\20\1\0\2\23"+
    "\1\24\1\0\1\25\1\26\1\27\1\30\15\0\1\20"+
    "\1\0\3\12\1\0\1\25\1\26\1\31\3\0\2\13"+
    "\1\14\24\13\2\16\1\14\24\16\15\0\3\20\1\0"+
    "\1\25\1\26\4\0\10\32\1\33\16\32\2\22\1\3"+
    "\1\34\23\22\13\0\1\20\1\0\2\23\1\24\1\0"+
    "\1\25\1\26\1\27\16\0\1\20\1\0\3\24\1\0"+
    "\1\25\1\26\15\0\2\35\2\0\3\36\24\0\6\30"+
    "\1\37\3\0\10\32\1\40\16\32\10\0\1\33\3\0"+
    "\1\3\14\0\1\3\41\0\3\36\24\0\3\36\1\0"+
    "\1\25\5\0\10\32\1\40\3\32\1\3\12\32";

  private static int [] zzUnpackTrans() {
    int [] result = new int[552];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\7\1\1\0\1\11\3\0\1\1\1\0"+
    "\3\1\1\11\1\0\1\11\1\1\1\11\2\0\1\1"+
    "\1\0\1\1\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[32];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
	public final ArrayList<Token> tokens=new ArrayList();
	String fileName="";
	String sourceCode="";
	public int getCurrentPos(){
		return zzCurrentPos;
	}
	public void setFileName(String fileName){
		this.fileName=fileName;
	}
	public void setSourceCode(String sourceCode){
		this.sourceCode=sourceCode;
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public BlufferLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { if (RegexTokenizer.getType(yytext())!=TT.EOF){
				tokens.add(new Token(yytext(),RegexTokenizer.getType(yytext()),fileName,yyline+1,yycolumn,zzCurrentPos));
			}else{
				ErrorHandler.InvalidCharacter(Helper.getBackTraceOneLine(sourceCode.getBytes(),zzCurrentPos),yyline+1,yycolumn);
			}
            }
            // fall through
          case 9: break;
          case 2:
            { 
            }
            // fall through
          case 10: break;
          case 3:
            { if (SUPPORTED_KEYWORDS.get(yytext())!=null){
			tokens.add(new Token(yytext(),SUPPORTED_KEYWORDS.get(yytext()),fileName,yyline+1,yycolumn,zzCurrentPos));
		}else{
			tokens.add(new Token(yytext(),TT.IDENTIFIER,fileName,yyline+1,yycolumn,zzCurrentPos));
		}
            }
            // fall through
          case 11: break;
          case 4:
            { try{
				long val=Long.parseLong(yytext().replaceAll("l|L",""));
				tokens.add(new Token(yytext(),RegexTool.getIntType(val),fileName,yyline+1,yycolumn,zzCurrentPos));
			}catch(NumberFormatException e){
				System.err.println("Integer overflow:"+yytext());
			}
            }
            // fall through
          case 12: break;
          case 5:
            { tokens.add(new Token(RegexTool.performEscaping(yytext(),sourceCode.getBytes(),0,0,0)
				,TT.STRING_LITERAL,fileName,yyline+1,yycolumn,zzCurrentPos));
            }
            // fall through
          case 13: break;
          case 6:
            { double val=Double.parseDouble(yytext());
			if (val>Double.MAX_VALUE){
				System.err.println("Floating number too large:"+yytext());
			}else{
				tokens.add(new Token(yytext(),RegexTool.getFloatType(val),fileName,yyline+1,yycolumn,zzCurrentPos));
			}
            }
            // fall through
          case 14: break;
          case 7:
            { try{
				long val=Long.parseLong(yytext().replaceAll("l|L",""),8);
				tokens.add(new Token(yytext(),RegexTool.getIntType(val),fileName,yyline+1,yycolumn,zzCurrentPos));
			}catch(NumberFormatException e){
				System.err.println("Integer overflow:"+yytext());
			}
            }
            // fall through
          case 15: break;
          case 8:
            { try{
				long val=Long.parseLong(yytext().replaceAll("l|L|x|X",""),16);
				tokens.add(new Token(yytext(),RegexTool.getIntType(val),fileName,yyline+1,yycolumn,zzCurrentPos));
			}catch(NumberFormatException e){
				System.err.println("Integer overflow:"+yytext());
				System.out.println(e.getMessage());
			}
            }
            // fall through
          case 16: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java BlufferLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        BlufferLexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new BlufferLexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
